Tecnicas de alineamiento antes de CSS grid: 

    - Margin
    - line-height
    - table-cell
    - positions

    Modos de escritura: 

        - Horizontal TB (Flujo horizontal, es decir que va del top al bottom eso significa TB)
        - Vertical LR  (Left - Right)
        - Vertical RL
        - Sideways LR 
        - Sideways RL 


    Block Flow Direction: 

        Display: block => Ubica los elementos de arriba a abajo (verticlamente)

        Display: inLine => Ubica los elementos uno al lado del otro (Horizontalmente)


    Propiedades logicas con CSS 

        1. margin - padding - border

        2. Block or inline

        3. start or end


        Modelo de caja: 

            - physical => es el de siempre => content - padding - border - margin

            - Logical => content -> padding-block-start (vertical) -> border-block-start -> margin-block-start



    Display ⇒ Desplegar, colocar a la vista, exhibir, lucir, Mostar, presentar

    Outer ⇒ Denota cómo se comporta un elemento en relación a los otros

    Inner ⇒ como se comportan los hijos directos del elemento

    Apuntes
    Display ⇒ Define el tipo de visualización de un elemento
    Valores:
    Inner
    Outer
    Los valores block e inline definen dos cosas
    Valor externo (Outer)
    Valor interno (Inner)

    Cuando usamos display: grid; estamos diciendo display: block grid;
    Es decir que su comportamiento externo sera de tipo bloque
    Un elemento que tenga los atributos de bloque puede tener:
    Margin y padding
    width
    height

    Si pensamos en display: inline-flex; su relación con otros elementos no sera de bloque sino de línea
    Siempre volvemos al flujo normal del documento

    RESUMEN: La diferencia entre grid e inline-grid es el comportamiento externo que tienen con otros elementos, usando grid sera de tipo bloque y usando inline-grid sera de tipo inline


    ejemplo de como crear filas y columnas con sus medidas de manera más efectiva: 

        .container{
            display: grid; 
            grid-template: repeat(5, 20px) / repeat(5, 20px); 
        }
             repeat (Cantidad de filas, tamaño de cada fila) / repeat (cantidad de columnas, tamaño de cada columna)

                                FILAS      /     COLUMNAS
            


alineamiento en el elemento contenedor: 

    ITEMS: Cuando habla de Items, quiere decir que va a alinear los items (hijos) que estan dentro del contenedor padre, es decir dentro de la grid.

    justify-items => los alinea de forma horizontal, es decir inline
    align-items => Los alinea de manera vertical, es decir block      
    place-items  => Los alinea tanto en block como en inline a la vez        

    

    Valores de estas propiedades: 

        .container{
            justify-items: start | end | center | stretch; 
        }

        .container{
            align-items: start | end | center | stretch; 
        }

        .container{
            place-items: <align-items> / <justify-items>; 
        }


    CONTENT: Cuando habla de content, es que va a alinear toooda la grid dentro del contenedor principal. 

        Valores de estas propiedades: 

        .container{
            justify-content: start | end | center | stretch; 
        }

         .container{
            justify-content: space-around | space-evenly | space-between; 
        }

        .container{
            align-content: start | end | center | stretch; 
        }

          .container{
            align-content: space-around | space-evenly | space-between; 
        }

        .container{
            place-content: <align-content> / <justify-content>; 
        }




